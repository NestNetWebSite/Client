name: Test - Server Operations

on:
    workflow_dispatch:
        inputs:
            test_type:
                description: "Type of test to run"
                required: true
                default: "file_creation"
                type: choice
                options:
                    - file_creation
                    - health_check
                    - log_check
                    - cleanup
            file_name:
                description: "Name of test file to create (for file_creation test)"
                required: false
                default: "test-deployment.txt"
            message:
                description: "Message to write in test file"
                required: false
                default: "Test deployment successful"

jobs:
    test-operations:
        name: Test Server Operations
        runs-on: self-hosted

        steps:
            - name: Checkout code
              uses: actions/checkout@v4

            - name: File Creation Test
              if: ${{ github.event.inputs.test_type == 'file_creation' }}
              run: |
                  # 디렉토리 생성 (없는 경우)
                  mkdir -p ~/test

                  # 홈 디렉토리의 test 폴더로 이동
                  cd ~/test

                  echo '${{ github.event.inputs.message }}' > ${{ github.event.inputs.file_name }}
                  echo 'Timestamp: $(date)' >> ${{ github.event.inputs.file_name }}
                  echo 'GitHub SHA: ${{ github.sha }}' >> ${{ github.event.inputs.file_name }}
                  echo 'Created by: GitHub Actions (Self-hosted)' >> ${{ github.event.inputs.file_name }}

                  echo 'Test file created successfully:'
                  cat ${{ github.event.inputs.file_name }}

                  # 현재 경로 출력 (디버깅용)
                  echo "Current directory: $(pwd)"

            - name: Health Check Test
              if: ${{ github.event.inputs.test_type == 'health_check' }}
              run: |
                  # 홈 디렉토리의 test 폴더로 이동 (없으면 생성)
                  mkdir -p ~/test
                  cd ~/test

                  echo '=== Docker Compose Status ==='
                  docker-compose ps || echo "docker-compose not found or no services running"

                  echo '=== Container Health ==='
                  docker stats --no-stream || echo "docker stats failed"

                  echo '=== Disk Usage ==='
                  df -h

                  echo '=== Memory Usage ==='
                  free -h

                  echo '=== Network Connectivity ==='
                  curl -f http://localhost:8080/actuator/health || echo 'Backend health check failed'

                  # 현재 경로 출력 (디버깅용)
                  echo "Current directory: $(pwd)"

            - name: Log Check Test
              if: ${{ github.event.inputs.test_type == 'log_check' }}
              run: |
                  # 홈 디렉토리의 test 폴더로 이동 (없으면 생성)
                  mkdir -p ~/test
                  cd ~/test

                  echo '=== Backend Logs (Last 50 lines) ==='
                  docker-compose logs --tail=50 backend || echo "backend logs not available"

                  echo '=== Nginx Logs (Last 20 lines) ==='
                  docker-compose logs --tail=20 nginx || echo "nginx logs not available"

                  echo '=== Database Logs (Last 20 lines) ==='
                  docker-compose logs --tail=20 db || echo "db logs not available"

                  # 현재 경로 출력 (디버깅용)
                  echo "Current directory: $(pwd)"
